
행동

전략 패턴 (Strategy)


1. 동일 계열의 관련 알고리즘군이 생긴다.

동일 계열의 알고리즘군 혹은 행동군을 정의한다. 이런 알고리즘 자체의 재사용도 가능하다.
상속을 통해서 알고리즘 공통의 기능성들을 추출하고 이를 재사용할 수 있다.
 
2. 서브클래싱을 사용하지 않는 대안이다.
알고리즘을 Strategy 클래스로 독립시키면 Context와 무관하게 알고리즘을 변형시킬 수 있고, 
알고리즘을 이해하기 쉽고 바꾸거나 확장하기도 쉽다.

3. 조건문을 없앨 수 있다.
원하는 행동들을 선택하는 조건문을 없앨 수 있다. 서로 다른 행동이 하나로 묶이면 조건문을
사용해서 정확한 행동을 선택할 수밖에 없다. 그러나 서로 다른 Strategy 클래스의 행동을
캡슐화하면 조건문을 없앨 수 있다.

void Composition ::Repair () { 
		switch ( breakingStrategy) 
		{
		case SimpleStrategy : 
			ComposeWithSimpleCompositor(); 
			break; 

		case TeXStrategy: 
			ComposeWithTeXCompositor(); 
			break; 
		}
}

void Composition: :Repair () 
{
	compositor -> Compose() ; 
}
많은 조건문을 포함하는 코드는 전략 패턴의 필요성을 생각한단다



4. 구현의 선택이 가능하다.
동일한 행둥에 대해서 서로 다른 구현을 제공할 수 있다. 서로 다른 시간과 공간이 필요한 여러 
Strategy들 중 상황에 맞게 전략을 선택 할 수 있다.


5. 사용자는 서로 다른 전략을 알아야 한다.
사용자는 적당한 전략을 선택하기 전에 전략들이 어떻게 다른지 이해해야한다. 이를 위해
사용자는 각 구현 내용을 모두 알아야 한다. 그러므로 사용자가 이렇게 서로 다른 행동 각각의
특징을 이미 알고 있을 때 전략 패턴을 사용한다.


6. Strategy 객체와 Context 객체 사이에 의사소통 오베해드가 있다.
구현할 알고리즘의 복잡함과는 상관없이 모든 ConcreteStrategy 클래스는 Strategy 인터페이스를 공유한다.
따라서 어떤 ConcreteStrategy 클래스는 인터페이스를 통해 들어온 모든 정보를 다 사용하지 않는데도
이정보를 떠안아야 할 때가 있다.
사용되지도 않을 매개변수를 Context객체가 생성하고 초기화할 때도 있다 이러한 상황이라면 Strategy와 context클래스
사이에 좀 더 높은 결합도가 필요할수도 있다.

7. 객체 수가 증가한다. 
전략들로 응용프로그램 내의 객체 수가 증가한다. 간혹 context 객체들이 공유할 수 있는 상태 없는 객체로서
Strategy를 구현하여 이런 불필요한 오버헤드를 줄일 수도 있다. 처리에 필요한 상태는 Context 클래스가
관리한다. 공유한 전략들은 호출 사이의 상태를 관리하지 말아야한다. 이방법을 더욱 자세히 만든 것이 플라이급 패턴이다.







https://drive.google.com/file/d/1L2WTUTGWd65yOnmCo4j8ylSy2HU7neZb/view?usp=sharing
Strategy 클래스 다이어그램