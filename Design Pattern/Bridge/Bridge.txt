
구조

브릿지 패턴(Bridge)

기능 계층과 구현 계층의 분리로 시스템의 확정성과 유지보수성을 높이는 패턴


상속은 구현과 추상적 개념을 영구적으로 종속시키기 때문에，
추상적 개념과 구현을 분리해서 재사용하거나 수정 · 확장하기가 쉽지 않습니다. 


추상적 개념에 해당하는 클래스 계통과 구현에 해당하는 클래스 계통을 분리함으로써 문제를
해결 할 수 있다 .


활용성 

1.추상적 개념과 이에 대한 구현 사이의 지속적인 종속 관계를 피하고 싶을 때
런타임에 구현 방법을 선택하거나 구현 내용을 변경하고 싶을때

2.추상적 개념과 구현 모두가 독립적으로 서브클래싱을 통해 확장되어야 할 때
브릿지 패턴은 개발자가 구현을 또 다른 추상적 개념과 연결할 수 있게 할 뿐 아니라
각각 독립적으로 확장 가능하게 하낟.

3. 추상적 개념에 대한 구현 내용을 변경하는 것이 다른 관련 프로그램에 아무런 영향을 
주지 않아야 할 때 즉, 추상적 개념에 해당하는 클래스를 사용하는 코드들은 구현 클래스가
변경되었다고 해서 다시 컴파일되지 않아야 한다.



결과

1. 인터페이스와 구현 분리
구현이 인터페이스에 얽매이지 않게 된다.
추상적 개념에 대한 어떤 방식의 구현을 택할지가 런타임에 결정될 수 있다.




https://drive.google.com/file/d/182_nxmmVXbofi8CRrDagLFFVTytyAbis/view?usp=sharing

클래스 다이어그램


공부하다보니 브리지 패턴과 전략 패턴이 비슷함을 느꼈다.


즉 스트래지 패턴은 사용자가 사용하고 싶은 정렬 알고리즘을 실행 중에 선택하여 진행할 수 있고 브릿지 패턴은 
데이터베이스들의 api를 wrapper 클래스를 추상화 하여 클라이언트가 동일한 api로 같은 동작할 수 있도록 한다는 것이다.

스트레지 패턴 : 같은 결과이지만 다른 처리방식(알고리즘)을 수행
브릿지 패턴 : 하나의 동작을 추상화하여 서로 다른 구조(데이터베이스, 네트워크 등) 수행
출처: https://devnote2.tistory.com/entry/Strategy-pattern-VS-Brigde-Pattern [Dev Note:티스토리]